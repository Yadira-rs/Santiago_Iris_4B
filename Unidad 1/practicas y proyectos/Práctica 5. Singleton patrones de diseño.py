# Practica 5. Patrones de dise침o
# Singleton

class Logger: 
    # creamos un atributo de clase donde se aguardar치 la 칰nica instancia 
    _instancia = None 

    # __new__ es el m칠todo que controla la creaci칩n del objeto antes de init.
    # Sirve para asegurarnos de que solo exista una 칰nica instancia de la clase Logger 
    def __new__(cls, *args, **kwargs):
        if cls._instancia is None: 
            cls._instancia = super().__new__(cls)
            # creamos atributo "archivo" que apunta a un archivo f칤sico
            # "a" significa append = todo lo que se escriba se agrega al final del archivo
            cls._instancia.archivo = open("app.log", "a")
        return cls._instancia  # devolvemos siempre la misma instancia

    def log(self, mensaje):
        self.archivo.write(mensaje + "\n")
        self.archivo.flush()  # asegura que se guarde en el disco

logger1 = Logger()  # primera y 칰nica instancia 
logger2 = Logger()  # devuelve la misma instancia

logger1.log("Inicio de sesi칩n en la aplicaci칩n")
logger2.log("El usuario se autentic칩")

# comprobar que son el mismo objeto en memoria
print(logger1 is logger2)


# Actividad de la pr치ctica

class Presidente:
    _instancia = None  # 游녣 faltaba declarar la variable de clase

    def __new__(cls, nombre):
        if cls._instancia is None:
            cls._instancia = super().__new__(cls)
            cls._instancia.nombre = nombre
            cls._instancia.historial = []
        return cls._instancia   # 游녣 aqu칤 estaba mal escrito (ten칤as __instancia)

    def accion(self, accion):  # 游녣 corregido el nombre del m칠todo (antes "aacion")
        evento = f"{self.nombre} {accion}"
        self.historial.append(evento)
        print(evento)

# Varios presidentes intentan tomar el poder 
p1 = Presidente("AMLO")
p2 = Presidente("Pe침a Nieto")
p3 = Presidente("Fox")

# Todos apuntan al mismo presidente 
p1.accion("firm칩 decreto")
p2.accion("visit칩 Espa침a")
p3.accion("aprob칩 un presupuesto")

print("\nHistorial del presidente")
print(p1.historial)

# Validaci칩n de Singleton
print(p1 is p2 is p3)  # True o False
